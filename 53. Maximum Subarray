class Solution:
    def cross_sum(self, nums, left, right, p): 
            if left == right:
                return nums[left]

            left_subsum = float('-inf')
            curr_sum = 0
            for i in range(p, left - 1, -1):
                curr_sum += nums[i]
                left_subsum = max(left_subsum, curr_sum)

            right_subsum = float('-inf')
            curr_sum = 0
            for i in range(p + 1, right + 1):
                curr_sum += nums[i]
                right_subsum = max(right_subsum, curr_sum)

            return left_subsum + right_subsum   
    
    def helper(self, nums, left, right): 
        if left == right:
            return nums[left]
        
        p = (left + right) // 2
            
        left_sum = self.helper(nums, left, p)
        right_sum = self.helper(nums, p + 1, right)
        cross_sum = self.cross_sum(nums, left, right, p)
        
        return max(left_sum, right_sum, cross_sum)
        
    def maxSubArray(self, nums: 'List[int]') -> 'int':
        return self.helper(nums, 0, len(nums) - 1)
#p is middle value. 
#+1 is from 4 to 2 
#when you want a negative value you declare it to infinity 
#curr_sum 0 is to find the max sum 
#+= nums[i] = x + = 1 
#x=x+1 
#def maxSubArray(self, nums: 'List[int]') -> 'int': gives you the cross sum which is 6. list[int] is the original list
#helper breaks down the list into right and left and cross. While cross_sum function will go back up 
#return self.helper(nums, 0, len(nums) - 1) works on 0-8. always put -1. 
